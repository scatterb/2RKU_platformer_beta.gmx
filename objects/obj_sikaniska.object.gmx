<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sikaniska</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables


dir = -1; 
movespeed = 3;
grav = 0.2;
hsp = 0;
vsp = 0;

state = e_state.patrol;

fearofheights = 1; // Will the enemy drop from on an edge or not.


// How many hits does it take to kill the enemy
hp = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to patrol state

sprite_index = spr_sikaniska
state = e_state.patrol;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement, states and collision


// Needed for the pause instance
if (global.pause) &amp;&amp; instance_exists(obj_player) exit;


// Modify variables
hsp = dir * movespeed;
vsp += grav;



// Patrol, hurt, kill and death states
if (object_exists(obj_player))
{   
    switch (state)
    {
        // PATROL
        case e_state.patrol:
        {
            if (place_meeting(x, y, obj_player))
            {
                if (obj_player.y &lt; y-16) // A.k.a. player jumps on head
                {
                    with (obj_player)
                    {
                        y -= 25;
                        vsp = -5; // Player is able to bounce from top of the enemy
                    }
                    hp -= 1;
                    alarm[0]= 100;
                    state = e_state.hurt;   
                }
                else // A.k.a. hits player from side
                {
                    state = e_state.killer;
                }
            }
        }
        break;
        // HURT
        case e_state.hurt:
        {
            sprite_index = spr_sikaniska_hurt;
            if hp &lt; 0
            {   
                state = e_state.death;
            }
        }
        break;
        // KILL / kills the player
        case e_state.killer:
        {
            scr_death();
        }
        break;
        // DEATH / kills the enemy
        case e_state.death:
        {
            sprite_index = spr_enemy_death; // Start death animation
            image_speed = 0.7;
            // The Animation End-Event handles the instance_destroy()
        }
        break;
    }
}

/////////////////////////////////////
// The patrol and hurt states
/*
switch (state)
{
    case e_state.patrol:
    {
        // Collision with player
        if (place_meeting(x, y, obj_player)) &amp;&amp; (obj_player.y &lt; y-16)
        {
            if hp &lt; 0
            {
                sprite_index = spr_enemy_death; // Start death animation
                image_speed = 0.7;
            }
            else
            {
                state = e_state.hurt;
                break;         
            }
        }
        if (place_meeting(x, y, obj_player))
        {
            if global.immortal == 0
            {
                scr_death();
            }
        }
    }
    case e_state.hurt:
    {
        sprite_index = spr_sikaniska_hurt
        alarm[0]=100;
        if (alarm == 50) image_speed = 0.1;
        break;
    }
}
       */     
        
//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    dir *= -1;
    //image_xscale *= -1;
}
x += hsp;


//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (fearofheights) &amp;&amp; !position_meeting(x+16*dir, y+(sprite_height/2)+8, obj_wall)
    {
        dir *= -1;
        //image_xscale *= -1;
    }
}
y += vsp;          
                    
                
                
                
 /*               
                
            // If hp left go to e_state.hurt
            
            {
            
            // If no hp left play death animation and kill the enemy
            if hp &lt; 0
            {
                sprite_index = spr_enemy_death; // Start death animation
                image_speed = 0.7;
            }
        }
        // Kills the player
        else 
        {
            if global.immortal == 0
            {
                scr_death();
            }
        }
    }
}
}

    hp -= 1;
                sprite_index = spr_sikaniska_hurt
                alarm[0]=100;
                if (alarm == 50) image_speed = 0.1;
            }        
    
    
    
/*
// Collision with player
if (place_meeting(x, y, obj_player))
{
    if (obj_player.y &lt; y-16) // Make sure that player and enemy sprites are really all the way 32
    {
        
        with (obj_player)
        {
            vsp = -5; // Used to be with... vsp = -jumpspeed (jumped way too high)
            //y -= 32; Not used at the moment. Made a nice bounce, but then the player easily gets stuck on the ceiling.
        }
        // If hp left play hurt animation
        if sprite_index = spr_sikaniska
        {
            hp -= 1;
            sprite_index = spr_sikaniska_hurt
            alarm[0]=100;
            if (alarm == 50) image_speed = 0.1;
        }
        // If no hp left play death animation and kill the enemy
        if hp &lt; 0
        {
            sprite_index = spr_enemy_death; // Start death animation
            image_speed = 0.7;
        }
    }
    // Kills the player
    else 
    {
        if global.immortal == 0
        {
            scr_death();
        }
    }
}
*/
    





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// When death animation finishes, so does the enemy

if (sprite_index = spr_enemy_death)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
