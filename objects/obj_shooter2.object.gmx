<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shooter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_collision_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

state = e_state.idle;
vsp = 0;
hsp = 0;

dir = 0;
movespeed = 1.2;
grav = 0.2;
fearofheights = 1;


global.bullet = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy bullet when alarm ends

with(obj_bullet2)
{
    global.bullet = 0;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After brief moment return kickback animation to normal

sprite_index = spr_shooter2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and bullet creation


// Needed for the pause instance
if (global.pause) &amp;&amp; instance_exists(obj_player) exit;


// Make the sprite flip when necessary
if instance_exists(obj_player)
{
    if (x &gt; obj_player.x)
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
}


//The idle and chase states
if instance_exists(obj_player)
{
    switch (state)
    {
        case e_state.idle:
        {
            hsp = 0;
            if (distance_to_object(obj_player) &lt; 150) state = e_state.chase;
        }
        break;
        case e_state.chase:
        {
            dir = sign(obj_player.x - x); // X-coordinate of our player, substract the x-coordinate of this enemy. It will negative if the player on the left, and positive if right.
            hsp = dir * 2;
            if (fearofheights) &amp;&amp; !position_meeting(x+16*dir, y+(sprite_height/2)+8, obj_wall)
            {
                dir *= -1; // Enemy stays waiting on an edge,
            }
            // Shoots a bullet if there already isn't one
            if !instance_exists(obj_bullet2)
            {
                // Shooting animation
                sprite_index = spr_kickback2;
                image_speed = 0.1;
                alarm[0] = 25; // Duration of kickback animation
                // Bullet created
                instance_create(x, y, obj_bullet2);
                // Bullet direction (this is pretty cumbersome, something better?)
                with obj_shooter2
                {
                    if hsp &lt; 0
                    {
                        with obj_bullet2
                        {
                            hspeed = -2;
                            image_xscale = -1;
                        }
                    }
                    else
                    {
                        with obj_bullet2
                        {
                            hspeed = 2;
                            image_xscale = 1;
                        }
                    }
                }
                global.bullet = 1;
                alarm[1] = 150; // Duration of bullet
                if (distance_to_object(obj_player) &gt; 80) state = e_state.idle;
            }   
        }
        break;
    }
}


// Modify variables
hsp = dir * movespeed;
vsp += grav;


//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    dir *= -1;
}
x += hsp;


//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (fearofheights) &amp;&amp; !position_meeting(x+16*dir, y+(sprite_height/2)+8, obj_wall)
    {
        dir *= -1;
    }
}
y += vsp;


// Collision with player
if (place_meeting(x, y, obj_player)) 
{
    if (obj_player.y &lt; y-16) // Make sure that player and enemy sprites are really all the way 32
    {
        // Kills the enemy
        with (obj_player)
        {
            vsp = -5; // Used to be with... vsp = -jumpspeed (jumped way too high)
            //y -= 32; Not used at the moment. Made a nice bounce, but then the player easily gets stuck on the ceiling.
        }
        sprite_index = spr_enemy_death; // Start death animation
        image_speed = 0.7;
    }
    // Kills the player
    else 
    {
        if global.immortal == 0
        {
            scr_death();
        }
    }
}


// Either one of these could be used on some other occasions

/*var ex, ey;
ex = instance_nearest(x, y, obj_player).x;
ey = instance_nearest(x, y, obj_player).y;
with (instance_create(x, y, obj_bullet))
   {
   direction = point_direction(x, y, ex, ey);
   }
*/

/*
with (instance_create(x, y, obj_bullet)) {
direction = other.direction;
image_angle = direction;
speed = 25;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// When death animation finishes, so does the enemy

if (sprite_index = spr_enemy_death)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
