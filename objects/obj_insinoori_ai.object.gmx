<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_insinoori_ai</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize variables

state = e_state.idle;
vsp = 0;
hsp = 0;

dir = 0; 
movespeed = 2;
grav = 0.2;
fearofheights = 0; // Will the enemy drop from on an edge or not.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State machines and collisions


// Needed for the pause instance
if (global.pause) &amp;&amp; instance_exists(obj_player) exit;


// Make the sprite flip when necessary
if instance_exists(obj_player) image_xscale = sign(obj_player.x - x | 1); 


//The idle and chase states
if instance_exists(obj_player)
{
    switch (state)
    {
        case e_state.idle:
        {
            hsp = 0;
            vsp = (min(7, vsp+0.05)); // Gravity stuff
            if (distance_to_object(obj_player) &lt; 96) state = e_state.chase;
        }
        break;
        case e_state.chase:
        {
            dir = sign(obj_player.x - x); /* X-coordinate of our player,
            substract the x-coordinate of this enemy. It will negative if the player on the
            left, and positive if right. */
            hsp = dir * 2;
            vsp = (min(7, vsp+0.05));
            if (distance_to_object(obj_player) &gt; 128) state = e_state.idle;     
        }
        break;
    }
}


// Modify variables
hsp = dir * movespeed;
vsp += grav;


//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    dir *= -1;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (fearofheights) &amp;&amp; !position_meeting(x+(sprite_width/2)*dir, y+(sprite_height/2)+8, obj_wall)
    {
        dir *= -1;
    }
}
y += vsp;


// Collision with player
if (place_meeting(x, y, obj_player))
{
    // Kills the enemy
    if (obj_player.y &lt; y-16) // make sure that player and enemy sprites are really all the way 32
    {
        with (obj_player) vsp = -5; // used to be vsp = -jumpspeed (jumped way too high)
        instance_destroy();
    }
    // Kills the player
    else 
    {
        if global.immortal == 0
        {
            scr_death();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
